<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>Ejercicio 2</title>
    <script src="scripts/jquery-3.3.1.js"></script>
    <script src="scripts/highcharts.js"></script>
    <script src="scripts/date.js"></script>
    <script src="scripts/exporting.js"></script>
    <script src="scripts/hashmaps.js"></script>
</head>
<body>
    <div id="piechart" width="300" height="150"></div>
    <div id="linechart" width="300" height="150"></div>
    <script>
        $(document).ready(function GetJSON() {
                $.ajax({
                    url: 'http://s3.amazonaws.com/logtrust-static/test/test/data1.json',
                    type: 'GET',
                    dataType: 'JSON',
                    success: function (data) {
                        var categorias = new Hashtable();
                        var sizetable = data.length;
                        var encontrado = 0;
                        var sumatorio = new Hashtable();

                        for (var c = 0; c < sizetable; c++) {
                            encontrado = 0;
                            for (var i = 0; i <= categorias.size() ; i++) {
                                var CategoriaHashmap = (categorias.keys()[i]);
                                var CategoriaJSON = data[c]["cat"].toUpperCase();

                                if (CategoriaHashmap === CategoriaJSON) {

                                    var date = new Date(data[c]["d"]);
                                    date = date.getTime();
                                    categorias.get(data[c]["cat"].toUpperCase()).put(date, data[c]["value"]);
                                    var encontrado = 1;
                                }

                            }
                            if (encontrado === 0 && categorias.isEmpty() === false) {
                                var date = new Date(data[c]["d"]);
                                date = date.getTime();
                                categorias.put(data[c]["cat"].toUpperCase(), new Hashtable());
                                categorias.get(data[c]["cat"].toUpperCase()).put(date, data[c]["value"]);
                            }

                            if (categorias.isEmpty() === true) {
                                var date = new Date(data[c]["d"]);
                                date = date.getTime();
                                categorias.put(data[c]["cat"].toUpperCase(), new Hashtable());
                                categorias.get(data[c]["cat"].toUpperCase()).put(date, data[c]["value"]);
                            }
                        }
                        $.ajax({
                            url: 'http://s3.amazonaws.com/logtrust-static/test/test/data2.json',
                            type: 'GET',
                            dataType: 'JSON',
                            success: function (data) {

                                var sizetable = data.length;
                                var encontrado = 0;

                                for (var c = 0; c < sizetable; c++) {
                                    encontrado = 0;

                                    for (var i = 0; i <= categorias.size() ; i++) {
                                        var CategoriaHashmap = (categorias.keys()[i]);
                                        var CategoriaJSON = data[c]["categ"].toUpperCase();

                                        if (CategoriaHashmap === CategoriaJSON) {
                                            var date = new Date(data[c]["myDate"]);
                                            date = date.getTime();
                                            categorias.get(data[c]["categ"].toUpperCase()).put(date, data[c]["val"]);
                                            var encontrado = 1;
                                        }
                                    }
                                    if (encontrado === 0 && categorias.isEmpty() === false) {
                                        var date = new Date(data[c]["myDate"]);
                                        date = date.getTime();
                                        categorias.put(data[c]["categ"].toUpperCase(), new Hashtable());
                                        categorias.get(data[c]["categ"].toUpperCase()).put(date, data[c]["val"]);
                                    }

                                    if (categorias.isEmpty() === true) {
                                        var date = new Date(data[c]["myDate"]);
                                        date = date.getTime();
                                        categorias.put(data[c]["categ"].toUpperCase(), new Hashtable());
                                        categorias.get(data[c]["categ"].toUpperCase()).put(date, data[c]["val"]);
                                    }
                                }
                                $.ajax({
                                    url: 'http://s3.amazonaws.com/logtrust-static/test/test/data3.json',
                                    type: 'GET',
                                    dataType: 'JSON',
                                    success: function (data) {

                                        var sizetable = data.length;
                                        var encontrado = 0;

                                        for (var c = 0; c < sizetable; c++) {
                                            encontrado = 0;

                                            for (var i = 0; i <= categorias.size() ; i++) {
                                                var CategoriaHashmap = (categorias.keys()[i]);
                                                var CategoriaJSON = data[c]["raw"].match(/(?:CAT [0-9]+){1}/);
                                                CategoriaJSON = CategoriaJSON[0].toUpperCase();

                                                if (CategoriaHashmap === CategoriaJSON) {
                                                    var regexDATE = data[c]["raw"].match(/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/);
                                                    var date = new Date(regexDATE[0]);
                                                    date = date.getTime();
                                                    categorias.get(CategoriaJSON).put(date, data[c]["val"]);
                                                    var encontrado = 1;
                                                }
                                            }
                                            if (encontrado === 0 && categorias.isEmpty() === false) {
                                                var regexDATE = data[c]["raw"].match(/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/);
                                                var date = new Date(regexDATE[0]);
                                                date = date.getTime();

                                                categorias.put(CategoriaJSON.toUpperCase(), new Hashtable());
                                                categorias.get(CategoriaJSON).put(date, data[c]["val"]);
                                            }

                                            if (categorias.isEmpty() === true) {
                                                var regexDATE = data[c]["raw"].match(/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/);
                                                var date = new Date(regexDATE[0]);
                                                date = date.getTime();

                                                categorias.put(CategoriaJSON.toUpperCase(), new Hashtable());
                                                categorias.get(CategoriaJSON).put(date, data[c]["val"]);
                                            }
                                        }
                                        var datos = [];
                                        for (var h = 0; h < categorias.size() ; h++) {
                                            var suma = 0;
                                            for (j = 0; j < categorias.get(categorias.keys()[h]).size() ; j++) {
                                                suma += categorias.get(categorias.keys()[h]).values()[j];
                                            }

                                            var serie = new Array(categorias.keys()[h], suma);
                                            datos.push(serie);
                                        }
                                        createPieChart(datos)
                                        createLineChart(categorias)
                                    }
                                });
                            }
                        });
                    }
                });
        });

        function createPieChart(series) {
            $('#piechart').highcharts(
                {
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        type: 'pie'
                    },
                    title: {
                        text: 'Devo Categories by PieChart'

                    },
                    tooltip: {
                        pointFormat: '{series.name}: {point.y} (<b>{point.percentage:.1f}%</b>)',
                        valueDecimals:2,
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: true,
                                format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                                style: {
                                    color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                }
                            }
                        }
                    },
                    series: [{
                        name: 'Total value',
                        colorByPoint: true,
                        data: series
                    }]

                });
        }

        function createLineChart(hashmap) {

            var key = hashmap.keys()[0];
            var general = [];
            var categories = [];
            var datos = [];

            for (var v = 0; v < hashmap.size() ; v++) {

                categories.push(hashmap.keys()[v]);

                var data = [];
                for (var w = 0; w < hashmap.get(hashmap.keys()[v]).size() ; w++) {
                    var serie1 = [];

                    serie1.push(hashmap.get(hashmap.keys()[v]).keys()[w], hashmap.get(hashmap.keys()[v]).values()[w]);
                    data.push(serie1);

                }
                general.push(data);
            }
            for (var x = 0; x < hashmap.size() ; x++) {
                general[x].sort(sortFunction);
                datos.push({
                    type: 'line',
                    name: categories[x],
                    data: general[x],
                    tooltip: {
                        valueDecimals: 2
                    }
                });
            }
            $('#linechart').highcharts(
                {
                    rangeSelector: {
                        selected: 1
                    },

                    title: {
                        text: 'Devo Categories by LineChart'
                    },
                    xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            millisecond: '%H:%M:%S.%L',
                            second: '%H:%M:%S',
                            minute: '%H:%M',
                            hour: '%H:%M',
                            day: '%e. %b',
                            week: '%e. %b',
                            month: '%b \'%y',
                            year: '%Y'
                        }
                    },
                    yAxis: {
                        title: {
                            text: 'Values'
                        }
                    },
                    series: datos
                });
        }

        function sortFunction(a, b) {
            if (a[0] === b[0]) {
                return 0;
            }
            else {
                return (a[0] < b[0]) ? -1 : 1;
            }
        }

        function getTimeStampAsString(timestamp) {
            date = new Date(timestamp);
            year = date.getFullYear();
            month = date.getMonth() + 1;
            month = month < 10 ? "0" + month : month;
            day = date.getDate();
            day = day < 10 ? "0" + day : day;
            return year + "-" + month + "-" + day;
        }
    </script>
</body>
</html>
